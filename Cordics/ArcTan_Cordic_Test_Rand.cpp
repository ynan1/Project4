#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <math.h>
#include <mutex>

using namespace std;
using namespace std::chrono;
std::mutex m;

auto objects2 = std::make_unique<double[]>(14);
auto k = std::make_unique<double[] >(14);
const double PI = 3.141592653589793238463;

double arctan(double real_x, double imag_x)
{
	double angle_cal = 0;
	double k[61] = { 1, 0.5, 0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.0078125, 0.00390625, 0.00195312, 0.000976562, 0.000488281, 0.000244141, 0.00012207, 6.10352e-05, 3.05176e-05, 1.52588e-05, 7.62939e-06, 3.8147e-06, 1.90735e-06, 9.53674e-07, 4.76837e-07, 2.38419e-07, 1.19209e-07, 5.96046e-08, 2.98023e-08, 1.49012e-08, 7.45058e-09, 3.72529e-09, 1.86265e-09, 9.31323e-10, 4.65661e-10, 2.32831e-10, 1.16415e-10, 5.82077e-11, 2.91038e-11, 1.45519e-11, 7.27596e-12, 3.63798e-12, 1.81899e-12, 9.09495e-13, 4.54747e-13, 2.27374e-13, 1.13687e-13, 5.68434e-14, 2.84217e-14, 1.42109e-14, 7.10543e-15, 3.55271e-15, 1.77636e-15, 8.88178e-16, 4.44089e-16, 2.22045e-16, 1.11022e-16, 5.55112e-17, 2.77556e-17, 1.38778e-17, 6.93889e-18, 3.46945e-18, 1.73472e-18, 8.67362e-19 };   //typical cordic values
	double ph[61] = { 7.8539816339744830962e-01, 4.6364760900080611621e-01, 2.4497866312686415417e-01, 1.2435499454676143503e-01, 6.2418809995957348474e-02, 3.1239833430268276254e-02, 1.5623728620476830803e-02, 7.8123410601011112965e-03, 3.9062301319669718276e-03, 1.9531225164788186851e-03, 9.7656218955931943040e-04, 4.8828121119489827547e-04, 2.4414062014936176402e-04, 1.2207031189367020424e-04, 6.1035156174208775022e-05, 3.0517578115526096862e-05, 1.5258789061315762107e-05, 7.6293945311019702634e-06, 3.8146972656064962829e-06, 1.9073486328101870354e-06, 9.5367431640596087942e-07, 4.7683715820308885993e-07, 2.3841857910155798249e-07, 1.1920928955078068531e-07, 5.9604644775390554414e-08, 2.9802322387695303677e-08, 1.4901161193847655147e-08, 7.4505805969238279871e-09, 3.7252902984619140453e-09, 1.8626451492309570291e-09, 9.3132257461547851536e-10, 4.6566128730773925778e-10, 2.3283064365386962890e-10, 1.1641532182693481445e-10, 5.8207660913467407226e-11, 2.9103830456733703613e-11, 1.4551915228366851807e-11, 7.2759576141834259033e-12, 3.6379788070917129517e-12, 1.8189894035458564758e-12, 9.0949470177292823792e-13, 4.5474735088646411896e-13, 2.2737367544323205948e-13, 1.1368683772161602974e-13, 5.6843418860808014870e-14, 2.8421709430404007435e-14, 1.4210854715202003717e-14, 7.1054273576010018587e-15, 3.5527136788005009294e-15, 1.7763568394002504647e-15, 8.8817841970012523234e-16, 4.4408920985006261617e-16, 2.2204460492503130808e-16, 1.1102230246251565404e-16, 5.5511151231257827021e-17, 2.7755575615628913511e-17, 1.3877787807814456755e-17, 6.9388939039072283776e-18, 3.4694469519536141888e-18, 1.7347234759768070944e-18, 8.673617379884035472e-19 };

	//double ph[11] = { 0.7853981633974483,0.4636476090008061,0.2449786631268641,0.1243549945467614,0.06241880999595735,0.03123983343026828, 0.01562372862047683, 0.007812341060101111, 0.003906230131966972, 0.001953122516478819, 0.0009765621895593195 };
	//double k[14] = { 1, 0.5, 0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.0078125, 0.00390625, 0.00195312, 0.000976562, 0.000488281, 0.000244141 };
	double ph_temp;
	double y_re;
	double y_im;
	int i = 1;
	double tol = 1;



	if (imag_x > 0)
	{
		ph_temp = -PI / 2;
		y_re = imag_x;
		y_im = -real_x;
	}
	else {
		ph_temp = PI / 2;
		y_re = -imag_x;
		y_im = real_x;
	}

	while (tol > 10e-8) {
		if (y_im >= 0)
		{
			y_re = y_re + y_im * k[i];
			double y_re1 = y_re - y_im * k[i];
			y_im = y_im - y_re1 * k[i];
			ph_temp = ph_temp - ph[i];
		}
		else {
			y_re = y_re - y_im * k[i];
			double y_re1 = y_re + y_im * k[i];
			y_im = y_im + y_re1 * k[i];
			ph_temp = ph_temp + ph[i];
		}
		tol = fabs(ph_temp + angle_cal);
		angle_cal = -ph_temp;
		i++;
	}
	//std::cout << "\n" << i - 1;
	return 180 * angle_cal / PI;
}

int main()
{
	double x = 0;
	double y = 0;
	//double angle = arctan(3, 7);
	//y = (7. / 3);
	//x = 180 * atan(y) / PI;
	//std::cout << "\n" << y << ' ' << x << ' ' << angle;
	//std::cout << "\n Error %age: " << 100 * ((x - angle) / x);


	for (int m = 0;m < 5;m++)
	{

		for (int n = 0;n < 10000; n++)
		{
			srand(time(0));

			x = -100 * (((double)rand()) / RAND_MAX);
		}

		//srand(time(0));

		for (int n = 0;n < 10000; n++)
		{
			srand(time(0));

			y = -10 * (((double)rand()) / RAND_MAX);
		}

		    double arctan_calc = arctan(x , y);
			double arctan_real = 180 * atan(y) / PI;
			double error_abs = abs(arctan_real - arctan_calc);

			if (error_abs > 0.0001)

			{
				printf("Error is more than .0001 \n");
				printf("%f %f   %f    %f  %f\n", x , y, arctan_calc, arctan_real, error_abs);
			}
		
	}

}
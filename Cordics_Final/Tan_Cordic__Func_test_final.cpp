// Tan Cordic function

#include <stdlib.h>
#include <iostream>
#include <math.h>
#include <string>
const double pi = 3.141592653589793238463;


double fn(double test_angle)

{
    double tan_v = 0.;
    double sigma;
    double factor = 0.;
    double angle = 0.;
    double N;
    double D;
    double value = 0;

    double k[201] = { 1, 0.5, 0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.0078125, 0.00390625, 0.00195312, 0.000976562, 0.000488281, 0.000244141, 0.00012207, 6.10352e-05, 3.05176e-05, 1.52588e-05, 7.62939e-06, 3.8147e-06, 1.90735e-06, 9.53674e-07, 4.76837e-07, 2.38419e-07, 1.19209e-07, 5.96046e-08, 2.98023e-08, 1.49012e-08, 7.45058e-09, 3.72529e-09, 1.86265e-09, 9.31323e-10, 4.65661e-10, 2.32831e-10, 1.16415e-10, 5.82077e-11, 2.91038e-11, 1.45519e-11, 7.27596e-12, 3.63798e-12, 1.81899e-12, 9.09495e-13, 4.54747e-13, 2.27374e-13, 1.13687e-13, 5.68434e-14, 2.84217e-14, 1.42109e-14, 7.10543e-15, 3.55271e-15, 1.77636e-15, 8.88178e-16, 4.44089e-16, 2.22045e-16, 1.11022e-16, 5.55112e-17, 2.77556e-17, 1.38778e-17, 6.93889e-18, 3.46945e-18, 1.73472e-18, 8.67362e-19, 4.33681e-19, 2.1684e-19, 1.0842e-19, 5.42101e-20, 2.71051e-20, 1.35525e-20, 6.77626e-21, 3.38813e-21, 1.69407e-21, 8.47033e-22, 4.23516e-22, 2.11758e-22, 1.05879e-22, 5.29396e-23, 2.64698e-23, 1.32349e-23, 6.61744e-24, 3.30872e-24, 1.65436e-24, 8.27181e-25, 4.1359e-25, 2.06795e-25, 1.03398e-25, 5.16988e-26, 2.58494e-26, 1.29247e-26, 6.46235e-27, 3.23117e-27, 1.61559e-27, 8.07794e-28, 4.03897e-28, 2.01948e-28, 1.00974e-28, 5.04871e-29, 2.52435e-29, 1.26218e-29, 6.31089e-30, 3.15544e-30, 1.57772e-30, 7.88861e-31, 3.9443e-31, 1.97215e-31, 9.86076e-32, 4.93038e-32, 2.46519e-32, 1.2326e-32, 6.16298e-33, 3.08149e-33, 1.54074e-33, 7.70372e-34, 3.85186e-34, 1.92593e-34, 9.62965e-35, 4.81482e-35, 2.40741e-35, 1.20371e-35, 6.01853e-36, 3.00927e-36, 1.50463e-36, 7.52316e-37, 3.76158e-37, 1.88079e-37, 9.40395e-38, 4.70198e-38, 2.35099e-38, 1.17549e-38, 5.87747e-39, 2.93874e-39, 1.46937e-39, 7.34684e-40, 3.67342e-40, 1.83671e-40, 9.18355e-41, 4.59177e-41, 2.29589e-41, 1.14794e-41, 5.73972e-42, 2.86986e-42, 1.43493e-42, 7.17465e-43, 3.58732e-43, 1.79366e-43, 8.96831e-44, 4.48416e-44, 2.24208e-44, 1.12104e-44, 5.60519e-45, 2.8026e-45, 1.4013e-45, 7.00649e-46, 3.50325e-46, 1.75162e-46, 8.75812e-47, 4.37906e-47, 2.18953e-47, 1.09476e-47, 5.47382e-48, 2.73691e-48, 1.36846e-48, 6.84228e-49, 3.42114e-49, 1.71057e-49, 8.55285e-50, 4.27642e-50, 2.13821e-50, 1.06911e-50, 5.34553e-51, 2.67276e-51, 1.33638e-51, 6.68191e-52, 3.34096e-52, 1.67048e-52, 8.35239e-53, 4.17619e-53, 2.0881e-53, 1.04405e-53, 5.22024e-54, 2.61012e-54, 1.30506e-54, 6.5253e-55, 3.26265e-55, 1.63133e-55, 8.15663e-56, 4.07832e-56, 2.03916e-56, 1.01958e-56, 5.09789e-57, 2.54895e-57, 1.27447e-57, 6.37237e-58, 3.18618e-58, 1.59309e-58, 7.96546e-59, 3.98273e-59, 1.99136e-59, 9.95682e-60, 4.97841e-60, 2.48921e-60, 1.2446e-60, 6.22302e-61 };   //typical cordic values
    double angles[61] = { 7.8539816339744830962e-01, 4.6364760900080611621e-01, 2.4497866312686415417e-01, 1.2435499454676143503e-01, 6.2418809995957348474e-02, 3.1239833430268276254e-02, 1.5623728620476830803e-02, 7.8123410601011112965e-03, 3.9062301319669718276e-03, 1.9531225164788186851e-03, 9.7656218955931943040e-04, 4.8828121119489827547e-04, 2.4414062014936176402e-04, 1.2207031189367020424e-04, 6.1035156174208775022e-05, 3.0517578115526096862e-05, 1.5258789061315762107e-05, 7.6293945311019702634e-06, 3.8146972656064962829e-06, 1.9073486328101870354e-06, 9.5367431640596087942e-07, 4.7683715820308885993e-07, 2.3841857910155798249e-07, 1.1920928955078068531e-07, 5.9604644775390554414e-08, 2.9802322387695303677e-08, 1.4901161193847655147e-08, 7.4505805969238279871e-09, 3.7252902984619140453e-09, 1.8626451492309570291e-09, 9.3132257461547851536e-10, 4.6566128730773925778e-10, 2.3283064365386962890e-10, 1.1641532182693481445e-10, 5.8207660913467407226e-11, 2.9103830456733703613e-11, 1.4551915228366851807e-11, 7.2759576141834259033e-12, 3.6379788070917129517e-12, 1.8189894035458564758e-12, 9.0949470177292823792e-13, 4.5474735088646411896e-13, 2.2737367544323205948e-13, 1.1368683772161602974e-13, 5.6843418860808014870e-14, 2.8421709430404007435e-14, 1.4210854715202003717e-14, 7.1054273576010018587e-15, 3.5527136788005009294e-15, 1.7763568394002504647e-15, 8.8817841970012523234e-16, 4.4408920985006261617e-16, 2.2204460492503130808e-16, 1.1102230246251565404e-16, 5.5511151231257827021e-17, 2.7755575615628913511e-17, 1.3877787807814456755e-17, 6.9388939039072283776e-18, 3.4694469519536141888e-18, 1.7347234759768070944e-18, 8.673617379884035472e-19 };

    if (test_angle > 5 * pi / 2)
    {
        while (test_angle > 5 * pi / 2)
        {
            test_angle = test_angle - 2 * pi;
        }
    }

    else if (test_angle < -pi / 2)
    {
        while (test_angle < -pi / 2)
        {
            test_angle = test_angle + 2 * pi;
        }
    }

    double theta = test_angle - pi;

    if (theta < -0.5 * pi)
        theta = theta + pi;

    else if (theta > 0.5 * pi)
        theta = theta - pi;

     N = 0.0;
     D = 1.0;

    angle = angles[0];

    for (int i = 0; i < 31; i++)   // Important - 31 iterations gives results with minimum errors
    {
        if (theta < 0.0)
            sigma = -1.0;
        else
            sigma = +1.0;

    factor = sigma * k[i];

    double N1 = 0;

         D = D - N * factor;
         N1 = D + N * factor;
         N = N1 * factor + N;

    theta = theta - sigma * angle;

    int length = sizeof(angles) / sizeof(angles[0]);

    if (length > (i+1))

         angle = angles[i + 1];

    else
         angle = angle / 2.0;
         k[i] = k[i] / 2.0;
    }

    value = N / D;

    return value;

}

int main()
{
    double test_angle_fn = 0;

    for (int m = 0;m < 5;m++)
    {
        srand(time(0));

        for (int n = 0;n < 10000; n++)
        {
            double test_angle_fn_fl = 2 * pi * (((double)rand()) / RAND_MAX); // Put minus sign to check minus values

            double tan_v = fn(test_angle_fn_fl);

            double tan_v_real = tan(test_angle_fn_fl);

            double error_percent_tan = (abs(tan_v_real - tan_v) / tan_v_real) * 100;

            if (error_percent_tan > 0.01)

            {
                printf("Error is more than .01 percent, please see the values below: \n");
                printf("tan(%f %s) %s = %f   %s  %f   %s  %f \n", test_angle_fn_fl, " radian", "calculated", tan_v, "tan value real =", tan_v_real, "percent error = ",error_percent_tan);
            }

        }
    }

}